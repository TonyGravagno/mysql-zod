import C from"node:path";import w from"fs-extra";import E from"knex";import b from"camelcase";function N(t,d,i){const h=i.nullish&&i.nullish===!0,n=i.requiredString&&i.requiredString===!0,m=t.split("(")[0].split(" ")[0],o=d==="YES",r=["z.string()"],u=["z.number()"],c=h?"nullish()":"nullable()",f="nonnegative()",e="min(1)";switch(m){case"date":case"datetime":case"timestamp":case"time":case"year":case"char":case"varchar":case"tinytext":case"text":case"mediumtext":case"longtext":case"json":case"decimal":return o?r.push(c):n&&r.push(e),r.join(".");case"tinyint":case"smallint":case"mediumint":case"int":case"bigint":case"float":case"double":return t.endsWith(" unsigned")&&u.push(f),o&&u.push(c),u.join(".");case"enum":return`z.enum([${t.replace("enum(","").replace(")","").replace(/,/g,", ")}])`}}async function j(t){const d=E({client:"mysql2",connection:{host:t.host,port:t.port,user:t.user,password:t.password,database:t.database}}),i=t.camelCase&&t.camelCase===!0;let n=(await d.raw("SELECT table_name as table_name FROM information_schema.tables WHERE table_schema = ?",[t.database]))[0].map(e=>e.table_name).filter(e=>!e.startsWith("knex_")).sort();const m=t.tables;console.dir(m);const o=m?.filter(e=>{const s=e.startsWith("/")&&e.endsWith("/");return console.dir(`${e} ${s}`),s}),r=m?.filter(e=>o?.includes(e));console.dir(r),r&&r.length&&(n=n.filter(e=>{if(r.includes(e))return!0;if(o&&o.length){let s=!1;return o.forEach(l=>{const a=l.substring(1,l.length-1);e.match(a)!==null&&(s=!0)}),s}})),console.dir(n);const u=t.ignore,c=u?.filter(e=>e.startsWith("/")&&e.endsWith("/")),f=u?.filter(e=>!c?.includes(e));f&&f.length&&(n=n.filter(e=>!f.includes(e))),c&&c.length&&(n=n.filter(e=>{let s=!0;return c.forEach(l=>{const a=l.substring(1,l.length-1);e.match(a)!==null&&(s=!1)}),s}));for(let e of n){const l=(await d.raw(`DESC ${e}`))[0];i&&(e=b(e));let a=`import z from 'zod'

export const ${e} = z.object({`;for(const p of l){const x=i?b(p.Field):p.Field,T=N(p.Type,p.Null,t);a=`${a}
  ${x}: ${T},`}a=`${a}
})

export type ${b(`${e}Type`)} = z.infer<typeof ${e}>
`;const y=t.folder&&t.folder!==""?t.folder:".",$=t.suffix&&t.suffix!==""?`${e}.${t.suffix}.ts`:`${e}.ts`,g=C.join(y,$);console.log("Created:",g),w.outputFileSync(g,a)}await d.destroy()}export{j as generate};
